// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class FileEnumerator : GLib.Object, IEnumerable {

		[Obsolete]
		protected FileEnumerator(GLib.GType gtype) : base(gtype) {}
		public FileEnumerator(IntPtr raw) : base(raw) {}

		protected FileEnumerator() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_file_enumerator_has_pending(IntPtr raw);

		public bool HasPending { 
			get {
				bool raw_ret = g_file_enumerator_has_pending(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_file_enumerator_set_pending(IntPtr raw, bool pending);

		public bool Pending { 
			set {
				g_file_enumerator_set_pending(Handle, value);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe bool g_file_enumerator_close_finish(IntPtr raw, IntPtr result, out IntPtr error);

		public unsafe bool CloseFinish(GLib.AsyncResult result) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_file_enumerator_close_finish(Handle, result == null ? IntPtr.Zero : result.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe IntPtr g_file_enumerator_next_files_finish(IntPtr raw, IntPtr result, out IntPtr error);

		public unsafe GLib.List NextFilesFinish(GLib.AsyncResult result) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_file_enumerator_next_files_finish(Handle, result == null ? IntPtr.Zero : result.Handle, out error);
			GLib.List ret = new GLib.List(raw_ret);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe bool g_file_enumerator_close(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe bool Close(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_file_enumerator_close(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_file_enumerator_is_closed(IntPtr raw);

		public bool IsClosed { 
			get {
				bool raw_ret = g_file_enumerator_is_closed(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_file_enumerator_next_files_async(IntPtr raw, int num_files, int io_priority, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void NextFilesAsync(int num_files, int io_priority, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_file_enumerator_next_files_async(Handle, num_files, io_priority, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_file_enumerator_close_async(IntPtr raw, int io_priority, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void CloseAsync(int io_priority, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_file_enumerator_close_async(Handle, io_priority, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe IntPtr g_file_enumerator_next_file(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.FileInfo NextFile(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_file_enumerator_next_file(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.FileInfo ret = GLib.Object.GetObject(raw_ret) as GLib.FileInfo;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_file_enumerator_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_file_enumerator_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "FileEnumerator.custom"
// FileEnumerator.custom - customizations to GLib.FileEnumerator
//
// Authors: Stephane Delcroix  <stephane@delcroix.org>
//
// Copyright (c) 2008 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

public IEnumerator GetEnumerator ()
{
	return new Enumerator (this);
}

public FileInfo NextFile ()
{
	return NextFile ((Cancellable) null);
}

class Enumerator : IEnumerator
{
	FileEnumerator file_enumerator;

	public Enumerator (FileEnumerator file_enumerator)
	{
		this.file_enumerator = file_enumerator;
	}

	FileInfo current=null;
	public object Current {
		get {
			return current;
		}
	}

	public bool MoveNext ()
	{
		current = file_enumerator.NextFile ();
		if (current == null)
			return false;
		return true;
	}

	public void Reset ()
	{
		throw new NotImplementedException ();
	}
}

#endregion
	}
}
