// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class DataInputStream : GLib.BufferedInputStream {

		[Obsolete]
		protected DataInputStream(GLib.GType gtype) : base(gtype) {}
		public DataInputStream(IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_data_input_stream_new(IntPtr base_stream);

		public DataInputStream (GLib.InputStream base_stream) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DataInputStream)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				if (base_stream != null) {
					names.Add ("base_stream");
					vals.Add (new GLib.Value (base_stream));
				}
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = g_data_input_stream_new(base_stream == null ? IntPtr.Zero : base_stream.Handle);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern int g_data_input_stream_get_newline_type(IntPtr raw);

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_data_input_stream_set_newline_type(IntPtr raw, int type);

		[GLib.Property ("newline-type")]
		public GLib.DataStreamNewlineType NewlineType {
			get  {
				int raw_ret = g_data_input_stream_get_newline_type(Handle);
				GLib.DataStreamNewlineType ret = (GLib.DataStreamNewlineType) raw_ret;
				return ret;
			}
			set  {
				g_data_input_stream_set_newline_type(Handle, (int) value);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern int g_data_input_stream_get_byte_order(IntPtr raw);

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_data_input_stream_set_byte_order(IntPtr raw, int order);

		[GLib.Property ("byte-order")]
		public GLib.DataStreamByteOrder ByteOrder {
			get  {
				int raw_ret = g_data_input_stream_get_byte_order(Handle);
				GLib.DataStreamByteOrder ret = (GLib.DataStreamByteOrder) raw_ret;
				return ret;
			}
			set  {
				g_data_input_stream_set_byte_order(Handle, (int) value);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe byte g_data_input_stream_read_byte(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe new byte ReadByte(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			byte raw_ret = g_data_input_stream_read_byte(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			byte ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe long g_data_input_stream_read_int64(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe long ReadInt64(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			long raw_ret = g_data_input_stream_read_int64(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			long ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe short g_data_input_stream_read_int16(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe short ReadInt16(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			short raw_ret = g_data_input_stream_read_int16(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			short ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe ushort g_data_input_stream_read_uint16(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe ushort ReadUint16(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			ushort raw_ret = g_data_input_stream_read_uint16(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			ushort ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe ulong g_data_input_stream_read_uint64(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe ulong ReadUint64(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			ulong raw_ret = g_data_input_stream_read_uint64(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			ulong ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe IntPtr g_data_input_stream_read_line(IntPtr raw, out UIntPtr length, IntPtr cancellable, out IntPtr error);

		public unsafe string ReadLine(out ulong length, GLib.Cancellable cancellable) {
			UIntPtr native_length;
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_data_input_stream_read_line(Handle, out native_length, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			length = (ulong) native_length;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe int g_data_input_stream_read_int32(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe int ReadInt32(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			int raw_ret = g_data_input_stream_read_int32(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			int ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe IntPtr g_data_input_stream_read_until(IntPtr raw, IntPtr stop_chars, out UIntPtr length, IntPtr cancellable, out IntPtr error);

		public unsafe string ReadUntil(string stop_chars, out ulong length, GLib.Cancellable cancellable) {
			IntPtr native_stop_chars = GLib.Marshaller.StringToPtrGStrdup (stop_chars);
			UIntPtr native_length;
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_data_input_stream_read_until(Handle, native_stop_chars, out native_length, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_stop_chars);
			length = (ulong) native_length;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe uint g_data_input_stream_read_uint32(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe uint ReadUint32(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			uint raw_ret = g_data_input_stream_read_uint32(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			uint ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_data_input_stream_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_data_input_stream_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
